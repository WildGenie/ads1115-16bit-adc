//*************************************************************************************************
// DEBUT DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// Nom           : Ds3231.cs
// Auteur        : Nicolas Dagnas
// Description   : Déclaration de l'objet Ds3231
// Environnement : Visual Studio 2010
// Créé le       : 09/12/2016
// Modifié le    : 05/09/2018
//*************************************************************************************************

//-------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Windows.Devices.I2c;
using Windows.Devices.Enumeration;
using Windows.Networking.Connectivity;
//-------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------

//*************************************************************************************************
// Début du bloc "Windows.Devices.Gpio"
//*************************************************************************************************
namespace Windows.Devices.Gpio
{

    //  ####    ####   ###    ###    ###     #
    //  #   #  #      #   #  #   #  #   #   ##
    //  #   #   ###      #      #      #   # #
    //  #   #      #  #   #    #    #   #    #
    //  ####   ####    ###   #####   ###     #

    //*********************************************************************************************
    // Classe Ds3231
    //*********************************************************************************************
    #region // Déclaration et Implémentation de l'Objet
    //---------------------------------------------------------------------------------------------
    /// <summary>
    /// Permet la communication avec la puce de gestion de l'heure.
    /// </summary>
    //---------------------------------------------------------------------------------------------
    public static class Ds3231
    {
        //-----------------------------------------------------------------------------------------
        // Section des Attributs
        //-----------------------------------------------------------------------------------------
        private static bool DevicePresenceException = false;
        private static bool Initializing = false;
        private static I2cDevice I2cCardDevice = null;
        //-----------------------------------------------------------------------------------------

        //*****************************************************************************************
        #region // Section des Procédures Privées
        //-----------------------------------------------------------------------------------------

        //*****************************************************************************************
        /// <summary>
        /// Convertie une valeur BCD en Integer.
        /// </summary>
        /// <param name="Value">Valeur BCD.</param>
        /// <returns>Integer.</returns>
        //-----------------------------------------------------------------------------------------
        private static int BcdToInt(byte V) { return (V & 0xF) + ((V >> 4) * 10); }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Convertie une valeur entière en valeur BCD.
        /// </summary>
        /// <param name="Value">Valeur Entière.</param>
        /// <returns>Valeur BCD.</returns>
        //-----------------------------------------------------------------------------------------
        private static byte IntToBcd(int V) { return (byte)((V % 10) | (V / 10) << 0x4); }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Lit la date et l'heure dans la puce.
        /// </summary>
        /// <returns>Objet <b>DateTime</b>.</returns>
        //-----------------------------------------------------------------------------------------
        private static DateTime ReadTime()
        {
            //-------------------------------------------------------------------------------------
            if (I2cCardDevice == null)
                return DateTime.MinValue;
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            try
            {
                //---------------------------------------------------------------------------------
                byte[] ReadBuffer = new byte[0x13];

                I2cCardDevice.WriteRead(new byte[] { 0x00 }, ReadBuffer);

                int Seconds = BcdToInt(ReadBuffer[0]);
                int Minutes = BcdToInt(ReadBuffer[1]);

                bool Is24HourCock = (ReadBuffer[2] >> 0x6) != 1;

                int Hours;

                if (Is24HourCock)
                    Hours = (ReadBuffer[2] & 0xF) + ((ReadBuffer[2] >> 4) & 0x1) * 10 +
                                                                 ((ReadBuffer[2] >> 0x5) * 20);
                else
                    Hours = (ReadBuffer[2] & 0xF) + ((ReadBuffer[2] >> 4) & 0x1) * 10 +
                                                                 ((ReadBuffer[2] >> 0x5) * 12);

                int Day = BcdToInt(ReadBuffer[3]);
                int Date = BcdToInt(ReadBuffer[4]);
                int Months = BcdToInt((byte)(ReadBuffer[5] & (byte)0x3f));
                int Year = BcdToInt(ReadBuffer[6]);

                return new DateTime(2000 + Year, Months, Date, Hours, Minutes, Seconds);
                //---------------------------------------------------------------------------------
            }
            //-------------------------------------------------------------------------------------
            catch { return DateTime.MinValue; }
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Ecrit la date et l'heure dans la puce.
        /// </summary>
        /// <param name="Value">Objet <b>DateTime</b> contenant la valeur à écrire.</param>
        //-----------------------------------------------------------------------------------------
        private static void WriteTime(DateTime Value)
        {
            //-------------------------------------------------------------------------------------
            if (I2cCardDevice != null)
            {
                //---------------------------------------------------------------------------------
                byte[] Buffer = new byte[8];

                int offset = 0;

                Buffer[offset++] = 0;
                Buffer[offset++] = IntToBcd(Value.Second);
                Buffer[offset++] = IntToBcd(Value.Minute);
                Buffer[offset++] = IntToBcd(Value.Hour);
                Buffer[offset++] = (byte)Value.DayOfWeek;
                Buffer[offset++] = IntToBcd(Value.Day);
                Buffer[offset++] = IntToBcd(Value.Month);
                Buffer[offset++] = IntToBcd(Value.Year % 100);

                try
                {
                    I2cCardDevice.Write(Buffer);
                }
                catch { I2cCardDevice = null; DevicePresenceException = true; }
                //---------------------------------------------------------------------------------
            }
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Synchronise l'heure avec Internet.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        private static async void SyncDateTime()
        {
            //-------------------------------------------------------------------------------------
            try
            {
                //---------------------------------------------------------------------------------
                HttpWebRequest Request = (HttpWebRequest)WebRequest.Create
                                             ("http://nist.time.gov/actualtime.cgi?lzbc=siqm9b");

                HttpWebResponse Response = (HttpWebResponse)(await Request.GetResponseAsync());
                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------
                if (Response.StatusCode == HttpStatusCode.OK)
                {
                    //-----------------------------------------------------------------------------
                    StreamReader Stream = new StreamReader(Response.GetResponseStream());

                    string Result = Stream.ReadToEnd();

                    Result = Regex.Match(Result, @"(?<=\btime="")[^""]*").Value;

                    double Milliseconds = Convert.ToInt64(Result) / 1000.0;

                    DateTime NetworkTime = new DateTime(1970, 1, 1).AddMilliseconds
                                                                                  (Milliseconds);
                    Ds3231.Now = NetworkTime;
                    //-----------------------------------------------------------------------------
                }
                //---------------------------------------------------------------------------------
            }
            catch { }
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //-----------------------------------------------------------------------------------------
        #endregion
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Initialise le bus de communication avec la carte de gestion de l'heure.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static async Task<bool> Initialize()
        {
            //-------------------------------------------------------------------------------------
            ConnectionTick.Snapshot();

            if (!Initializing && I2cCardDevice == null && !DevicePresenceException)
            {
                //---------------------------------------------------------------------------------
                Initializing = true;
                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------
                try
                {
                    //-----------------------------------------------------------------------------
                    var QuerySyntaxString = I2cDevice.GetDeviceSelector("I2C1");

                    var DeviceIds = await DeviceInformation.FindAllAsync(QuerySyntaxString);

                    I2cConnectionSettings ConnSettings = new I2cConnectionSettings(0x68);

                    ConnSettings.BusSpeed = I2cBusSpeed.FastMode;
                    ConnSettings.SharingMode = I2cSharingMode.Shared;

                    I2cCardDevice = await I2cDevice.FromIdAsync(DeviceIds[0].Id, ConnSettings);

                    ReadTime();
                    //-----------------------------------------------------------------------------
                }
                //---------------------------------------------------------------------------------
                catch (FileNotFoundException)
                { I2cCardDevice = null; DevicePresenceException = true; }
                //---------------------------------------------------------------------------------
                catch { }
                //---------------------------------------------------------------------------------
                finally { Initializing = false; }
                //---------------------------------------------------------------------------------
            }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
            return true;
            //-------------------------------------------------------------------------------------
        }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Initialise le bus de communication avec la carte de gestion de l'heure.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static async void InitializeAsync() { await Initialize(); }
        //*****************************************************************************************

        //-----------------------------------------------------------------------------------------
        private static QueryPerformance ConnectionTick = QueryPerformance.Zero;
        private static QueryPerformance SyncTimeTick = QueryPerformance.Zero;
        //-----------------------------------------------------------------------------------------
        private static object RefTimeObject = new object();
        private static QueryPerformance RefTimeTick = QueryPerformance.Zero;
        private static DateTime RefTimeValue = DateTime.MinValue;
        //-----------------------------------------------------------------------------------------
        private static QueryPerformance SetTimeTick = QueryPerformance.Zero;
        //-----------------------------------------------------------------------------------------

        //-----------------------------------------------------------------------------------------
        private static QueryPerformance ReadTempTick = QueryPerformance.Zero;
        private static double ReadTempValue = -1;
        //-----------------------------------------------------------------------------------------

        //*****************************************************************************************
        /// <summary>
        /// Indique si la puce de gestion de l'heure est présente.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static bool DevicePresent { get { return (I2cCardDevice != null); } }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Indique si l'objet doit tenter de ce synchroniser.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static bool Synchronizable { get; set; }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Obtiens la date et l'heure courante.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static DateTime Now
        {
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get
            {
                //---------------------------------------------------------------------------------
                try
                {
                    //-----------------------------------------------------------------------------
                    // La comunication avec la Carte est Valide :)
                    //-----------------------------------------------------------------------------
                    if (I2cCardDevice != null)
                    {
                        //-------------------------------------------------------------------------
                        // Nous avons 2 problème concernant les horloges :
                        //
                        // 1. L'horloge de la raspberry peut ne pas être à l'heure, et change du 
                        //    tout au tout lors de la synchro internet. Donc cette donnée n'est 
                        //    pas fiable.
                        //
                        // 2. L'horloge de la puce Ds3231 dérive s'il fait trop chaud (>40°)
                        //
                        // La seule solution est d'utiliser un objet QueryPerformance qui servira
                        // de référent temporel et de la valeur lue à un instant T de la puce
                        // Ds3231. On utilisera exclusivement l'objet QueryPerformance pour
                        // fournir l'heure actuelle :
                        //
                        // Heure de la puce + QueryPerformance.ElapsedMilliseconds
                        //
                        // L'objet QueryPerformance sera initialisé au moment de la lecture de
                        // l'heure de la puce. On profitera de la régularité de l'objet
                        // QueryPerformance pour recaller l'heure de la puce toutes les 60 minutes.
                        //
                        // L'idée étant de conserver une valeur fiable dans la puce pour la
                        // récupérer après un reboot, pour réduire au maximum les risques de dérive
                        //-------------------------------------------------------------------------

                        //-------------------------------------------------------------------------
                        // On synchronise avec Internet toutes les 12 heures
                        //-------------------------------------------------------------------------
                        if (Ds3231.SyncTimeTick.ElapsedMilliseconds > 12 * 60 * 60 * 1000)
                        {
                            //---------------------------------------------------------------------
                            Ds3231.SyncTimeTick.Snapshot();

                            if (Synchronizable && Network.InternetNetworkAvailable)
                                Ds3231.SyncDateTime();
                            //---------------------------------------------------------------------
                        }
                        //-------------------------------------------------------------------------

                        //-------------------------------------------------------------------------
                        // Si on n'a pas d'horloge de référence, on lit la puce
                        //-------------------------------------------------------------------------
                        if (Ds3231.RefTimeValue == DateTime.MinValue)
                        {
                            //---------------------------------------------------------------------
                            lock (RefTimeObject)
                            {
                                Ds3231.RefTimeValue = ReadTime();

                                if (Ds3231.RefTimeValue != DateTime.MinValue)
                                {
                                    // On tick la référence temporel et le timer de callage

                                    Ds3231.RefTimeTick.Snapshot();
                                    Ds3231.SetTimeTick.Snapshot();

                                    return Ds3231.RefTimeValue.ToLocalTime();
                                }
                            }
                            //---------------------------------------------------------------------
                        }
                        //-------------------------------------------------------------------------

                        //-------------------------------------------------------------------------
                        // On a une horloge de référence, on la renvoi :)
                        //-------------------------------------------------------------------------
                        else
                        {
                            //---------------------------------------------------------------------
                            // Heure GMT
                            //---------------------------------------------------------------------
                            DateTime TimeGMT = Ds3231.RefTimeValue.AddMilliseconds
                                                        (Ds3231.RefTimeTick.ElapsedMilliseconds);
                            //---------------------------------------------------------------------

                            //---------------------------------------------------------------------
                            // Profitons ici pour recaller l'horloge de la puce Ds3231
                            //---------------------------------------------------------------------
                            if (Ds3231.SetTimeTick.ElapsedMilliseconds > 60 * 60 * 1000)
                            {
                                //-----------------------------------------------------------------
                                Ds3231.SetTimeTick.Snapshot();

                                WriteTime(TimeGMT);
                                //-----------------------------------------------------------------
                            }
                            //---------------------------------------------------------------------

                            //---------------------------------------------------------------------
                            return TimeGMT.ToLocalTime();
                            //---------------------------------------------------------------------
                        }
                        //-------------------------------------------------------------------------
                    }
                    //-----------------------------------------------------------------------------

                    //-----------------------------------------------------------------------------
                    // On n'a pas initialisé ou il y a eu erreur ou déconnexion :/
                    //-----------------------------------------------------------------------------
                    else if (ConnectionTick.ElapsedMilliseconds > 10 * 1000)
                    {
                        //-------------------------------------------------------------------------
                        Ds3231.InitializeAsync();
                        //-------------------------------------------------------------------------
                    }
                    //-----------------------------------------------------------------------------
                }
                //---------------------------------------------------------------------------------
                catch { }
                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------
                if (Ds3231.RefTimeValue != DateTime.MinValue)
                    return Ds3231.RefTimeValue.AddMilliseconds(Ds3231.RefTimeTick.
                                                              ElapsedMilliseconds).ToLocalTime();
                return DateTime.Now;
                //---------------------------------------------------------------------------------
            }
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            set
            {
                //---------------------------------------------------------------------------------
                if (value != DateTime.MinValue)
                {
                    //-----------------------------------------------------------------------------
                    // On met à l'heure la puce, il faut donc réinitialiser les références
                    //-----------------------------------------------------------------------------
                    lock (RefTimeObject)
                    {
                        //-------------------------------------------------------------------------
                        if (I2cCardDevice != null)
                            WriteTime(value.ToUniversalTime());

                        // On tick la référence temporel et le timer de callage

                        Ds3231.RefTimeTick.Snapshot();
                        Ds3231.SetTimeTick.Snapshot();

                        Ds3231.RefTimeValue = value;
                        //-------------------------------------------------------------------------
                    }
                    //-----------------------------------------------------------------------------
                }
                //---------------------------------------------------------------------------------
            }
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
        //*****************************************************************************************

        //*****************************************************************************************
        /// <summary>
        /// Obtiens la température autour de la puce.
        /// </summary>
        //-----------------------------------------------------------------------------------------
        public static double Temperature
        {
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get
            {
                //---------------------------------------------------------------------------------
                try
                {
                    //-----------------------------------------------------------------------------
                    // La comunication avec la Carte est Valide :)
                    //-----------------------------------------------------------------------------
                    if (I2cCardDevice != null)
                    {
                        //-------------------------------------------------------------------------
                        // On lit la température toutes les 15 secondes
                        //-------------------------------------------------------------------------
                        if (ReadTempTick.ElapsedMilliseconds > 15 * 1000)
                        {
                            //---------------------------------------------------------------------
                            ReadTempTick.Snapshot();
                            //---------------------------------------------------------------------

                            //---------------------------------------------------------------------
                            byte[] Buffer = new byte[2];

                            I2cCardDevice.WriteRead(new byte[] { 0x11 }, Buffer);

                            ReadTempValue = (double)Buffer[0] + ((double)(Buffer[1] >> 6) / 4f);
                            //---------------------------------------------------------------------
                        }
                        //-------------------------------------------------------------------------
                    }
                    //-----------------------------------------------------------------------------
                }
                //---------------------------------------------------------------------------------
                catch { }
                //---------------------------------------------------------------------------------

                //---------------------------------------------------------------------------------
                return ReadTempValue;
                //---------------------------------------------------------------------------------
            }
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
        //*****************************************************************************************
    }
    //---------------------------------------------------------------------------------------------
    #endregion
    //*********************************************************************************************

} // Fin du namespace "Windows.Devices.Gpio"
  //*************************************************************************************************

//*************************************************************************************************
// FIN DU FICHIER
//*************************************************************************************************